{"version":3,"sources":["components/About.js","components/TextForm.js","components/Navbar.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","_useState","useState","color","background","_useState2","Object","slicedToArray","mystyle","setMyStyle","_useState3","_useState4","btntext","setbtntext","react_default","a","createElement","className","id","style","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","TextForm","props","text","setText","Fragment","mode","for","heading","backgroundColor","value","onChange","event","console","log","target","rows","newtext","toUpperCase","showAlert","low_text","toLowerCase","split","length","Navbar","concat","react_router_dom","to","title","aria-label","aria-current","class","toggleMode","htmlfor","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","Action","document","body","react_router","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.a2ca292c.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nexport default function About() {\r\n\r\n  const [mystyle,setMyStyle]=useState({\r\n      color:'black',\r\n      background:'white'\r\n  })\r\n  const [btntext,setbtntext]=useState(\"Enable Dark mode\")\r\n  const toggle =()=>{\r\n      if(mystyle.color===\"black\"){\r\n        setMyStyle({\r\n          color:\"white\",\r\n          background:\"black\"\r\n        })\r\n        setbtntext(\"Enable Light mode\")\r\n      }\r\n      else{\r\n        setMyStyle({\r\n        color:\"black\",\r\n        background:\"white\"\r\n      })\r\n      setbtntext(\"Enable Dark mode\")\r\n\r\n      }\r\n  }\r\n  return (\r\n    <div className=\"accordion container my-5\" id=\"accordionExample\" style={mystyle}>\r\n      <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n          <button\r\n            className=\"accordion-button\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#collapseOne\"\r\n            aria-expanded=\"true\"\r\n            aria-controls=\"collapseOne\"\r\n            style={mystyle}\r\n          >\r\n            Accordion Item #1\r\n          </button>\r\n        </h2>\r\n        <div\r\n          id=\"collapseOne\"\r\n          className=\"accordion-collapse collapse show\"\r\n          aria-labelledby=\"headingOne\"\r\n          data-bs-parent=\"#accordionExample\"\r\n        >\r\n          <div className=\"accordion-body\" style={mystyle}>\r\n            <strong>This is the first item's accordion body.</strong> It is\r\n            shown by default, until the collapse plugin adds the appropriate\r\n            classNamees that we use to style each element. These classNamees control the\r\n            overall appearance, as well as the showing and hiding via CSS\r\n            transitions. You can modify any of this with custom CSS or\r\n            overriding our default variables. It's also worth noting that just\r\n            about any HTML can go within the <code>.accordion-body</code>,\r\n            though the transition does limit overflow.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n          <button\r\n            className=\"accordion-button collapsed\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#collapseTwo\"\r\n            aria-expanded=\"false\"\r\n            aria-controls=\"collapseTwo\"\r\n            style={mystyle}\r\n          >\r\n            Accordion Item #2\r\n          </button>\r\n        </h2>\r\n        <div\r\n          id=\"collapseTwo\"\r\n          className=\"accordion-collapse collapse\"\r\n          aria-labelledby=\"headingTwo\"\r\n          data-bs-parent=\"#accordionExample\"\r\n        >\r\n          <div className=\"accordion-body\" style={mystyle}>\r\n            <strong>This is the second item's accordion body.</strong> It is\r\n            hidden by default, until the collapse plugin adds the appropriate\r\n            classNamees that we use to style each element. These classNamees control the\r\n            overall appearance, as well as the showing and hiding via CSS\r\n            transitions. You can modify any of this with custom CSS or\r\n            overriding our default variables. It's also worth noting that just\r\n            about any HTML can go within the <code>.accordion-body</code>,\r\n            though the transition does limit overflow.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n          <button\r\n            className=\"accordion-button collapsed\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#collapseThree\"\r\n            aria-expanded=\"false\"\r\n            aria-controls=\"collapseThree\"\r\n            style={mystyle}\r\n          >\r\n            Accordion Item #3\r\n          </button>\r\n        </h2>\r\n        <div\r\n          id=\"collapseThree\"\r\n          className=\"accordion-collapse collapse\"\r\n          aria-labelledby=\"headingThree\"\r\n          data-bs-parent=\"#accordionExample\"\r\n        >\r\n          <div className=\"accordion-body\" style={mystyle}>\r\n            <strong>This is the third item's accordion body.</strong> It is\r\n            hidden by default, until the collapse plugin adds the appropriate\r\n            classNamees that we use to style each element. These classNamees control the\r\n            overall appearance, as well as the showing and hiding via CSS\r\n            transitions. You can modify any of this with custom CSS or\r\n            overriding our default variables. It's also worth noting that just\r\n            about any HTML can go within the <code>.accordion-body</code>,\r\n            though the transition does limit overflow.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container my-2\">\r\n          <button className=\"btn btn-primary\" onClick={toggle}>{btntext}</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React,{useState} from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const text_transform =() =>{\r\n    console.log(\"Clicked to convert\" + text);\r\n    let newtext = text.toUpperCase();\r\n    setText(newtext)\r\n    props.showAlert(\"Converted to uppercase\",\"success\");\r\n  }\r\n  const handleonChange =(event)=>{\r\n    console.log(\"on change\");\r\n    setText(event.target.value)\r\n  }\r\n  const text_low=()=>{\r\n    let low_text = text.toLowerCase();\r\n    setText(low_text)\r\n    props.showAlert(\"Converted to Lowercase\",\"success\");\r\n\r\n\r\n  }\r\n  const [text,setText]=useState(\"\");\r\n  // text = \"This is the new text\" -->Wrong way to chnage the text\r\n  // setText = \"This is the new text\" --> correct way\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n          <div className=\"form-group\" style={{color:props.mode===\"dark\"?\"white\":\"black\"}}>\r\n              <label for=\"exampleFormControlTextarea1\">{props.heading}</label>\r\n              <textarea\r\n              className=\"form-control\"\r\n              id=\"exampleFormControlTextarea1\" style={{backgroundColor:props.mode===\"dark\"?\"grey\":\"white\",color:props.mode===\"dark\"?\"white\":\"black\"}} value={text} onChange={handleonChange}\r\n              rows=\"5\"\r\n              ></textarea>\r\n              <button className=\"btn btn-primary my-2 mx-2\" onClick={text_transform}>Convert to uppercase</button>\r\n              <button className=\"btn btn-primary my-2\" onClick={text_low}>Convert to lowercase</button>\r\n          </div>\r\n      </div>\r\n      <div className=\"details\" style={{color:props.mode===\"dark\"?\"white\":\"black\"}} >\r\n        <h2>Your Text Summary</h2>\r\n        <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n        <p>{0.008*text.split(\" \").length} minutes read</p>\r\n\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter something\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                        </li>\r\n                        \r\n                        \r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"></input>\r\n                        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div class={`custom-control custom-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input type=\"checkbox\" class=\"custom-control-input\" id=\"customSwitch1\" onClick={props.toggleMode}></input>\r\n                        <label className=\"custom-control-label\" htmlfor=\"customSwitch1\">Enable dark mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n// props types\r\nNavbar.propTypes = {\r\n    title:PropTypes.string.isRequired,\r\n    Action:PropTypes.string,\r\n}\r\n// Navbar.defaultProps = {\r\n//     title:\"Default\"\r\n// }","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n\r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n</div>\r\n  )\r\n}\r\n","\nimport './App.css';\nimport About from './components/About';\nimport TextForm from './components/TextForm';\nimport Navbar from './components/Navbar';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\n\n// import TextForm from './components/TextForm';\n\nfunction App() {\n  const[mode,setMode]=useState('light');\n  const[alert,setAlert]=useState(null);\n  \n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    },1000);\n  }\n  const toggleMode=()=>{\n    if(mode===\"light\"){\n      setMode(\"dark\");\n      document.body.style.backgroundColor=\"grey\";\n      showAlert(\"Dark mode has been enabled\",\"success\");\n      document.title=\"dark Mode\";\n    }\n    else{\n      setMode(\"light\");\n      document.body.style.backgroundColor=\"white\";\n      showAlert(\"Light mode has been enabled\",\"success\");\n      document.title=\"Light Mode\";\n\n\n    }\n  }\n  return (\n    <>\n    <Router>\n        <Navbar title=\"Textutlis\" Action=\"Amazing\" mode={mode} toggleMode={toggleMode}/>\n        <Alert alert={alert}/>\n        <div className=\"container\">\n        <Routes>\n          <Route exact path=\"/About\" element={<About/>}>\n          </Route>\n          <Route exact path=\"/\" element={<TextForm heading=\"Enter your text here\" mode={mode} showAlert={showAlert}/>}>\n          \n          </Route>\n        </Routes>\n        </div>\n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}